import 'dart:async';
import 'dart:developer' as developer;

import 'package:just_audio/just_audio.dart';
import 'package:rxdart/rxdart.dart';

class AudioPlayerManager {
  // StreamController ƒë·ªÉ qu·∫£n l√Ω l·ªùi b√†i h√°t
  final StreamController<String> _lyricsStreamController = StreamController<String>.broadcast();

  // Getter ƒë·ªÉ tr·∫£ v·ªÅ Stream
  Stream<String> get lyricsStream => _lyricsStreamController.stream;

  // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t l·ªùi b√†i h√°t
  void updateLyrics(String lyrics) {
    if (!_lyricsStreamController.isClosed) {
      _lyricsStreamController.add(lyrics);
    } else {
      developer.log("‚ö†Ô∏è Attempted to add lyrics to a closed StreamController.", name: 'AudioPlayerManager');
    }
  }

  // Singleton pattern
  AudioPlayerManager._internal();

  static final AudioPlayerManager _instance = AudioPlayerManager._internal();

  factory AudioPlayerManager() => _instance;

  // C√°c thu·ªôc t√≠nh kh√°c
  String get currentUrl => _songUrl;
  AudioPlayer? _player;
  Stream<DurationState>? durationState;
  String _songUrl = "";

  AudioPlayer get player {
    _player ??= AudioPlayer();
    return _player!;
  }

  // Get player state stream as broadcast stream
  Stream<PlayerState> get playerStateStream => player.playerStateStream.asBroadcastStream();

  // Chu·∫©n b·ªã b√†i h√°t
  Future<void> prepare({bool isNewSong = false}) async {
    if (_songUrl.isEmpty) return;

    durationState = Rx.combineLatest2<Duration, PlaybackEvent, DurationState>(
      player.positionStream,
      player.playbackEventStream,
      (position, playbackEvent) => DurationState(
        progress: position,
        buffered: playbackEvent.bufferedPosition,
        total: playbackEvent.duration,
      ),
    ).asBroadcastStream();

    if (isNewSong) {
      try {
        await player.setUrl(_songUrl);
      } catch (e) {
        developer.log("üî¥ Error setting song URL: $e", name: 'AudioPlayerManager');
      }
    }
  }

  // C·∫≠p nh·∫≠t URL b√†i h√°t
  Future<void> updateSongUrl(String url) async {
    _songUrl = url;
    await prepare(isNewSong: true);
  }

  // D·ª´ng ph√°t nh·∫°c
  Future<void> stop() async {
    await player.stop();
  }

  // Gi·∫£i ph√≥ng t√†i nguy√™n
  Future<void> dispose() async {
    await player.dispose();
    _player = null; // ƒê·ªÉ player ƒë∆∞·ª£c t·∫°o l·∫°i n·∫øu c·∫ßn
    if (!_lyricsStreamController.isClosed) {
      _lyricsStreamController.close();
    }
  }
}

// L·ªõp DurationState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i th·ªùi l∆∞·ª£ng b√†i h√°t
class DurationState {
  const DurationState({
    required this.progress,
    required this.buffered,
    this.total,
  });

  final Duration progress;
  final Duration buffered;
  final Duration? total;
}